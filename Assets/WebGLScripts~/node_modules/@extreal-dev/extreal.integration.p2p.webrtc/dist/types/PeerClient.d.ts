import { SocketOptions, ManagerOptions } from "socket.io-client";
import { OnStarted } from "./ClientState";
import { PeerRole } from "./PeerRole";
type PcCreateHook = (id: string, isOffer: boolean, pc: RTCPeerConnection) => void | Promise<void>;
type PcCloseHook = (id: string) => void;
type StartHostResponse = {
    status: number;
    message: string;
};
type ListHostsResponse = {
    status: number;
    hosts: Array<{
        id: string;
        name: string;
    }>;
};
type PeerConfig = {
    url: string;
    socketOptions: SocketOptions & ManagerOptions;
    pcConfig: RTCConfiguration;
    isDebug: boolean;
};
type PeerClientCallbacks = {
    onStarted: OnStarted;
    onConnectFailed: (reason: string) => void;
    onDisconnected: (reason: string) => void;
};
/**
 * Client class for P2P connections.
 */
declare class PeerClient {
    private readonly isDebug;
    private readonly peerConfig;
    private socket;
    private readonly pcMap;
    private readonly pcCreateHooks;
    private readonly pcCloseHooks;
    private readonly clientState;
    private readonly callbacks;
    role: PeerRole;
    hostId: string | null;
    constructor(peerConfig: PeerConfig, callbacks: PeerClientCallbacks);
    /**
     * Adds a hook that is called when a peer connection is created.
     * @param hook - Hook
     */
    addPcCreateHook: (hook: PcCreateHook) => void;
    /**
     * Adds a hook that is called when a peer connection is closed.
     * @param hook - Hook
     */
    addPcCloseHook: (hook: PcCloseHook) => void;
    private getSocket;
    private receiveMessageAsync;
    private getFrom;
    private getMe;
    private receiveUserDisconnected;
    private receiveConnectError;
    private receiveDisconnect;
    startHost: (name: string, handle: (response: StartHostResponse) => void) => void;
    listHosts: (handle: (response: ListHostsResponse) => void) => void;
    startClientAsync: (hostId: string) => Promise<void>;
    private sendOfferAsync;
    stop: () => void;
    private stopSocket;
    private createPcAsync;
    private closePc;
    private sendSdp;
    private sendIce;
    private sendMessage;
    private receiveJoinAsync;
    private receiveOfferAsync;
    private sendAnswerAsync;
    private receiveAnswerAsync;
    private receiveDone;
    private receiveCandidate;
    private receiveBye;
    private handlePc;
    private handlePcAsync;
    private logError;
}
export { PeerClient };
