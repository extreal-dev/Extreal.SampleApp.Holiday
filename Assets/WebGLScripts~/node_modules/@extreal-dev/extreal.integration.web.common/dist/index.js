let o,t;const n=new Map;globalThis.__getNop=n=>(t=n,t=>{o=JSON.parse(l(t)).isDebug,console.log(`helper: isDebug=${o}`)}),globalThis.__getMethod=o=>{const t=n.get(o);if(!t)throw new Error(`bound method not found. name=${o}`);return t};const e=(o,t)=>{n.set(o,t)},l=o=>t.UTF8ToString(o),a=o=>{const n=t.lengthBytesUTF8(o)+1,e=t.Module._malloc(n);return t.stringToUTF8(o,e,n),e},c=new Map,r=new Map,s=new Map,i="";e("CallAction",((t,n,e)=>{const a=l(t),r=c.get(a);if(!r)throw new Error(`A action to call not found. name=${a}`);const s=n?l(n):i,u=e?l(e):i;o&&console.log(`call action: name=${a} strParam1=${s} strParam2=${u}`),r(s,u)})),e("CallFunction",((t,n,e)=>{const c=l(t),s=r.get(c);if(!s)throw new Error(`A function to call not found. name=${c}`);const u=n?l(n):i,g=e?l(e):i;return o&&console.log(`call function: name=${c} strParam1=${u} strParam2=${g}`),a(s(u,g))})),e("AddCallback",((n,e)=>{const c=l(n);o&&console.log(`add callback: name=${c}`),s.set(c,((o,n)=>{((o,n,e)=>{const l=a(n),c=a(e);t.Module.dynCall_vii(o,l,c),t.Module._free(l),t.Module._free(c)})(e,o,n)}))}));const u=(o,t)=>{c.set(o,t)},g=(o,t)=>{r.set(o,t)},m=(t,n,e)=>{const l=s.get(t);if(!l)throw new Error(`A callback to call not found. name=${t}`);o&&console.log(`call callback: name=${t} strParam1=${n} strParam2=${e}`),l(n??i,e??i)},d=(o,t,n=100)=>new Promise(((e,l)=>{const a=()=>{o()||t()?e():setTimeout(a,n)};a()})),$=o=>"function"==typeof o&&"[object AsyncFunction]"===Object.prototype.toString.call(o);export{u as addAction,g as addFunction,m as callback,$ as isAsync,o as isDebug,d as waitUntil};
