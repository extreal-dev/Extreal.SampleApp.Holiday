type Pointer = number;
type ActionMethod = (namePtr: Pointer, strParamPtr1: Pointer, strParamPtr2: Pointer) => void;
type FunctionMethod = (namePtr: Pointer, strParamPtr1: Pointer, strParamPtr2: Pointer) => string;
type CallbackMethod = (namePtr: Pointer, callbackPtr: Pointer) => void;
type BindMethod = ActionMethod | FunctionMethod | CallbackMethod;
type Module = {
    _malloc(size: number): Pointer;
    _free(ptr: Pointer): void;
    dynCall_vii(funcPtr: Pointer, buf1: Pointer, buf2: Pointer): void;
};
type Helper = {
    Module: Module;
    lengthBytesUTF8: (str: string) => number;
    stringToUTF8: (str: string, buf: Pointer, size: number) => void;
    UTF8ToString: (ptr: Pointer) => string;
};
/**
 * Debug or not.
 */
declare let isDebug: boolean;
declare global {
    var __getNop: (helperObj: Helper) => void;
    var __getMethod: (name: string) => BindMethod;
}
type Action = (str1: string, str2: string) => void;
type Function = (str1: string, str2: string) => string;
/**
 * Adds a function without a return value.
 *
 * @param name - Target
 * @param action - Function
 */
declare const addAction: (name: string, action: Action) => void;
/**
 * Adds a function with a return value.
 *
 * @param name - Target
 * @param func - Function
 */
declare const addFunction: (name: string, func: Function) => void;
/**
 * Callbacks.
 *
 * @param name - Target
 * @param strParam1 - First string parameter
 * @param strParam2 - Second string parameter
 */
declare const callback: (name: string, strParam1?: string, strParam2?: string) => void;
/**
 * Waits until the condition is satisfied.
 *
 * @param condition - Condition
 * @param cancel - Function to determine whether to cancel
 * @param interval - Interval to be checked(milliseconds)
 * @returns Promise
 */
declare const waitUntil: (condition: () => boolean, cancel: () => boolean, interval?: number) => Promise<void>;
/**
 * Determines if it is an AsynFunction.
 *
 * @param func - Function
 */
declare const isAsync: (func: object) => boolean;
export { addAction, addFunction, callback, isDebug, waitUntil, isAsync };
