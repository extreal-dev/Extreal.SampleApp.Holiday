import{addAction as t,callback as e,addFunction as i}from"@extreal-dev/extreal.integration.web.common";class s{constructor(t,e,i){this.label="textchat",this.createPc=(t,e,i)=>{if(!this.dcMap.has(t))if(e){const e=i.createDataChannel(this.label);this.handleDc(t,e)}else i.addEventListener("datachannel",(e=>this.handleDc(t,e.channel)))},this.handleDc=(t,e)=>{e.label===this.label&&(this.isDebug&&console.log(`New DataChannel: id=${t} label=${e.label}`),this.dcMap.set(t,e),e.addEventListener("message",(t=>{this.callbacks.onDataReceived(t.data)})))},this.closePc=t=>{const e=this.dcMap.get(t);e&&(e.close(),this.dcMap.delete(t))},this.send=t=>[...this.dcMap.values()].forEach((e=>e.send(t))),this.clear=()=>{[...this.dcMap.keys()].forEach(this.closePc),this.dcMap.clear()},this.isDebug=t.isDebug,this.dcMap=new Map,this.getPeerClient=e,this.callbacks=i,this.getPeerClient().addPcCreateHook(this.createPc),this.getPeerClient().addPcCloseHook(this.closePc)}}class a{constructor(){this.adapt=i=>{t(this.withPrefix("WebGLTextChatClient"),(t=>{this.textChatClient=new s(JSON.parse(t),i,{onDataReceived:t=>e(this.withPrefix("HandleOnDataReceived"),t)})})),t(this.withPrefix("DoSend"),(t=>this.getTextChatClient().send(t))),t(this.withPrefix("Clear"),(()=>this.getTextChatClient().clear()))},this.withPrefix=t=>`WebGLTextChatClient#${t}`,this.getTextChatClient=()=>{if(!this.textChatClient)throw new Error("Call the WebGLTextChatClient constructor first in Unity.");return this.textChatClient}}}class h{constructor(t,e){this.createPc=async(t,e,i)=>{if(this.outAudios.has(t))return;this.isDebug&&console.log(`New MediaStream: id=${t}`);const s=this,a=await navigator.mediaDevices.getUserMedia({audio:!0});s.inStream=a;const h=a.getAudioTracks()[0];s.inTrack=h,i.addTrack(h,a),h.enabled=!this.initialMute;const c=new Audio;s.outAudios.set(t,c),i.addEventListener("track",(async e=>{const i=e.streams[0];c.srcObject=i,c.loop=!0,await c.play(),s.outStreams.set(t,i)}))},this.closePc=t=>{const e=this.outAudios.get(t);e&&(e.pause(),this.outAudios.delete(t));const i=this.outStreams.get(t);i&&(i.getTracks().forEach((t=>t.stop())),this.outStreams.delete(t))},this.clear=()=>{null!==this.inStream&&(this.inStream.getTracks().forEach((t=>t.stop())),this.inStream=null),this.inTrack=null,[...this.outAudios.keys()].forEach(this.closePc),this.outAudios.clear(),this.outStreams.clear()},this.toggleMute=()=>{const t=this.inTrack;return!t||(t.enabled=!t.enabled,!t.enabled)},this.isDebug=t.isDebug,this.initialMute=t.initialMute,this.getPeerClient=e,this.inStream=null,this.inTrack=null,this.outAudios=new Map,this.outStreams=new Map,this.getPeerClient().addPcCreateHook(this.createPc),this.getPeerClient().addPcCloseHook(this.closePc)}}class c{constructor(){this.adapt=e=>{t(this.withPrefix("WebGLVoiceChatClient"),(t=>{this.voiceChatClient=new h(JSON.parse(t),e)})),i(this.withPrefix("ToggleMute"),(()=>this.getVoiceChatClient().toggleMute().toString())),t(this.withPrefix("Clear"),(()=>this.getVoiceChatClient().clear()))},this.withPrefix=t=>`WebGLVoiceChatClient#${t}`,this.getVoiceChatClient=()=>{if(!this.voiceChatClient)throw new Error("Call the WebGLVoiceChatClient constructor first in Unity.");return this.voiceChatClient}}}export{a as TextChatAdapter,c as VoiceChatAdapter};
